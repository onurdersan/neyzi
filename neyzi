<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Olcay Neyzi Persentil Hesaplayıcı</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #f4f7f9;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 20px;
            min-height: 100vh;
            line-height: 1.6;
        }
        .container {
            width: 100%;
            max-width: 600px;
            background-color: #ffffff;
            padding: 25px 30px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #1a73e8;
            margin-bottom: 25px;
            font-size: 1.8em;
        }
        .input-group {
            margin-bottom: 20px;
        }
        .input-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #555;
        }
        .input-group input[type="number"],
        .input-group input[type="date"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 1em;
        }
        .radio-group {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
        }
        .radio-group label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
        }
        .age-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        #direct-age-inputs {
            display: none;
            display: flex;
            gap: 10px;
        }
        #direct-age-inputs > div {
            flex: 1;
        }
        .results {
            margin-top: 30px;
            background-color: #e8f0fe;
            border: 1px solid #d2e3fc;
            border-radius: 8px;
            padding: 20px;
        }
        .results h2 {
            margin-top: 0;
            color: #1a73e8;
            border-bottom: 2px solid #1a73e8;
            padding-bottom: 10px;
        }
        #results-output {
            font-family: "Courier New", Courier, monospace;
            font-size: 1.1em;
            white-space: pre-wrap;
            min-height: 50px;
        }
        .copy-button {
            display: block;
            width: 100%;
            padding: 12px;
            margin-top: 20px;
            background-color: #1a73e8;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .copy-button:hover {
            background-color: #1558b8;
        }
        .disclaimer {
            font-size: 0.8em;
            color: #777;
            margin-top: 20px;
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Olcay Neyzi Persentil Hesaplayıcı</h1>
        <form id="percentile-form">
            
            <div class="input-group">
                <label>Cinsiyet</label>
                <div class="radio-group">
                    <label><input type="radio" name="gender" value="male" required> Erkek</label>
                    <label><input type="radio" name="gender" value="female" required> Kız</label>
                </div>
            </div>

            <div class="input-group">
                 <label>Yaş Hesaplama Yöntemi</label>
                <div class="radio-group">
                    <label><input type="radio" name="age_method" value="dob" checked> Doğum Tarihi</label>
                    <label><input type="radio" name="age_method" value="direct"> Yaş Gir</label>
                </div>
                <div class="age-options">
                    <div id="dob-input">
                        <label for="dob">Doğum Tarihi</label>
                        <input type="date" id="dob">
                    </div>
                    <div id="direct-age-inputs">
                        <div>
                            <label for="years">Yıl</label>
                            <input type="number" id="years" placeholder="Örn: 5" min="0" max="18">
                        </div>
                        <div>
                             <label for="months">Ay</label>
                            <input type="number" id="months" placeholder="Örn: 3" min="0" max="11">
                        </div>
                    </div>
                </div>
            </div>

            <div class="input-group">
                <label for="weight">Ağırlık (kg)</label>
                <input type="number" id="weight" placeholder="Örn: 18.5" step="0.1">
            </div>

            <div class="input-group">
                <label for="height">Boy (cm)</label>
                <input type="number" id="height" placeholder="Örn: 110.2" step="0.1">
            </div>

            <div class="input-group">
                <label for="head_circ">Baş Çevresi (cm)</label>
                <input type="number" id="head_circ" placeholder="Örn: 51.0" step="0.1">
            </div>
        </form>

        <div class="results">
            <h2>Sonuçlar</h2>
            <div id="results-output">Lütfen yukarıdaki alanları doldurun...</div>
        </div>

        <button class="copy-button" id="copy-button">Sonuçları Kopyala</button>

        <p class="disclaimer">
            <strong>UYARI:</strong> Bu araç, Olcay Neyzi ve arkadaşlarının 2008 tarihli makalesindeki ÖRNEK verilere dayanmaktadır. Klinik kullanım için uygun değildir ve tıbbi teşhis yerine geçmez.
        </p>
    </div>

    <script>
        // --- VERİ KISMI ---
        // DİKKAT: Bu veriler temsilidir ve makalenin tamamını yansıtmaz.
        // Gerçek bir uygulama için makaledeki tüm tabloların buraya girilmesi gerekir.
        // Yapı: { cinsiyet: { metrik: { yaş_ay_olarak: { L, M, S } } } }
        const lmsData = {
            male: {
                weight: {
                    // Örnek veriler: 0, 6, 12, 24, 60 ay (5 yaş)
                    0: { L: -0.169, M: 3.39, S: 0.141 },
                    6: { L: -0.113, M: 7.91, S: 0.119 },
                    12: { L: -0.108, M: 9.98, S: 0.117 },
                    24: { L: -0.187, M: 12.55, S: 0.121 },
                    60: { L: 0.161, M: 18.72, S: 0.133 }
                },
                height: {
                    0: { L: 1, M: 50.48, S: 0.041 },
                    6: { L: 1, M: 67.81, S: 0.038 },
                    12: { L: 1, M: 76.11, S: 0.036 },
                    24: { L: 1, M: 87.94, S: 0.037 },
                    60: { L: 1, M: 111.72, S: 0.041 }
                },
                head_circ: {
                    0: { L: 1, M: 35.01, S: 0.040 },
                    6: { L: 1, M: 43.89, S: 0.032 },
                    12: { L: 1, M: 46.33, S: 0.030 },
                    24: { L: 1, M: 48.65, S: 0.028 },
                    60: { L: 1, M: 51.05, S: 0.027 }
                }
            },
            female: {
                weight: {
                    // Örnek veriler: 0, 6, 12, 24, 60 ay (5 yaş)
                    0: { L: -0.228, M: 3.28, S: 0.148 },
                    6: { L: -0.203, M: 7.28, S: 0.124 },
                    12: { L: -0.154, M: 9.24, S: 0.126 },
                    24: { L: -0.126, M: 12.01, S: 0.132 },
                    60: { L: 0.287, M: 18.23, S: 0.146 }
                },
                height: {
                    0: { L: 1, M: 49.88, S: 0.042 },
                    6: { L: 1, M: 65.91, S: 0.039 },
                    12: { L: 1, M: 74.52, S: 0.037 },
                    24: { L: 1, M: 86.85, S: 0.039 },
                    60: { L: 1, M: 110.84, S: 0.044 }
                },
                head_circ: {
                     0: { L: 1, M: 34.42, S: 0.041 },
                    6: { L: 1, M: 42.75, S: 0.033 },
                    12: { L: 1, M: 45.19, S: 0.031 },
                    24: { L: 1, M: 47.60, S: 0.029 },
                    60: { L: 1, M: 50.15, S: 0.028 }
                }
            }
        };

        // --- UYGULAMA MANTIĞI ---

        const form = document.getElementById('percentile-form');
        const allInputs = form.querySelectorAll('input');
        const resultsOutput = document.getElementById('results-output');
        const copyButton = document.getElementById('copy-button');

        const ageMethodRadios = document.querySelectorAll('input[name="age_method"]');
        const dobInputDiv = document.getElementById('dob-input');
        const directAgeInputsDiv = document.getElementById('direct-age-inputs');

        function toggleAgeInputs() {
            const selectedMethod = document.querySelector('input[name="age_method"]:checked').value;
            if (selectedMethod === 'dob') {
                dobInputDiv.style.display = 'block';
                directAgeInputsDiv.style.display = 'none';
            } else {
                dobInputDiv.style.display = 'none';
                directAgeInputsDiv.style.display = 'flex';
            }
            calculateAll();
        }

        ageMethodRadios.forEach(radio => radio.addEventListener('change', toggleAgeInputs));

        function getAgeInMonths() {
            const method = document.querySelector('input[name="age_method"]:checked').value;
            if (method === 'dob') {
                const dob = document.getElementById('dob').value;
                if (!dob) return null;
                const birthDate = new Date(dob);
                const today = new Date();
                
                let years = today.getFullYear() - birthDate.getFullYear();
                let months = today.getMonth() - birthDate.getMonth();
                
                if (today.getDate() < birthDate.getDate()) {
                    months--;
                }
                if (months < 0) {
                    years--;
                    months += 12;
                }
                return (years * 12) + months;

            } else {
                const years = parseInt(document.getElementById('years').value) || 0;
                const months = parseInt(document.getElementById('months').value) || 0;
                if (years === 0 && months === 0) return null;
                return (years * 12) + months;
            }
        }

        // Z-skor'dan persentil hesaplayan fonksiyon (Normal dağılım CDF'si)
        function zScoreToPercentile(z) {
            if (z < -3.5) return 0;
            if (z > 3.5) return 100;

            // Hata fonksiyonu (erf) approksimasyonu
            const p = 0.3275911;
            const a1 = 0.254829592;
            const a2 = -0.284496736;
            const a3 = 1.421413741;
            const a4 = -1.453152027;
            const a5 = 1.061405429;

            const sign = (z < 0) ? -1 : 1;
            const x = Math.abs(z) / Math.sqrt(2.0);
            const t = 1.0 / (1.0 + p * x);
            const erf = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);
            const cdf = 0.5 * (1.0 + sign * erf);
            
            return (cdf * 100).toFixed(1);
        }

        // Veri tablosundan en yakın yaşa ait LMS değerlerini bulur
        function getLMS(gender, metric, ageInMonths) {
            if (!lmsData[gender] || !lmsData[gender][metric]) return null;
            
            const ageKeys = Object.keys(lmsData[gender][metric]).map(Number);
            const closestAge = ageKeys.reduce((prev, curr) => 
                (Math.abs(curr - ageInMonths) < Math.abs(prev - ageInMonths) ? curr : prev)
            );
            
            return lmsData[gender][metric][closestAge];
        }

        function calculateAll() {
            const gender = form.elements['gender'].value;
            const ageInMonths = getAgeInMonths();

            const weight = parseFloat(document.getElementById('weight').value);
            const height = parseFloat(document.getElementById('height').value);
            const headCirc = parseFloat(document.getElementById('head_circ').value);

            if (!gender || ageInMonths === null || ageInMonths < 0) {
                resultsOutput.textContent = 'Lütfen cinsiyet ve geçerli bir yaş bilgisi girin...';
                return;
            }
            
            let resultsText = '';
            const results = [];

            const metrics = [
                { name: 'Ağırlık', value: weight, key: 'weight' },
                { name: 'Boy', value: height, key: 'height' },
                { name: 'Baş Çevresi', value: headCirc, key: 'head_circ' }
            ];

            metrics.forEach(metric => {
                if (metric.value && !isNaN(metric.value)) {
                    const lms = getLMS(gender, metric.key, ageInMonths);
                    if (lms) {
                        const { L, M, S } = lms;
                        let zScore;

                        if (L !== 0) {
                            zScore = (Math.pow(metric.value / M, L) - 1) / (L * S);
                        } else {
                            zScore = Math.log(metric.value / M) / S;
                        }
                        
                        const percentile = zScoreToPercentile(zScore);
                        
                        results.push({
                            name: metric.name,
                            value: metric.value,
                            unit: metric.key === 'weight' ? 'kg' : 'cm',
                            percentile: percentile,
                            zScore: zScore.toFixed(2)
                        });
                    }
                }
            });

            if (results.length > 0) {
                resultsText = "Parametre      Değer          Persentil    Z-Skor\n";
                resultsText += "-------------- -------------- ------------ ----------\n";
                results.forEach(r => {
                    const nameStr = r.name.padEnd(14, ' ');
                    const valueStr = `${r.value} ${r.unit}`.padEnd(14, ' ');
                    const pStr = `${r.percentile}.p`.padEnd(12, ' ');
                    const zStr = r.zScore;
                    resultsText += `${nameStr} ${valueStr} ${pStr} ${zStr}\n`;
                });
            } else {
                resultsText = "Hesaplama için en az bir ölçüm değeri girin...";
            }

            resultsOutput.textContent = resultsText;
        }
        
        // Kopyalama fonksiyonu
        copyButton.addEventListener('click', () => {
            const textToCopy = resultsOutput.textContent;
            navigator.clipboard.writeText(textToCopy).then(() => {
                const originalText = copyButton.textContent;
                copyButton.textContent = 'Kopyalandı!';
                setTimeout(() => {
                    copyButton.textContent = originalText;
                }, 1500);
            }).catch(err => {
                console.error('Kopyalama başarısız oldu: ', err);
            });
        });
        
        // Herhangi bir veri girişi değiştiğinde hesaplamayı tetikle
        allInputs.forEach(input => {
            input.addEventListener('input', calculateAll);
            input.addEventListener('change', calculateAll); // radio/date için
        });

        // Sayfa yüklendiğinde başlangıç durumunu ayarla
        document.addEventListener('DOMContentLoaded', () => {
            toggleAgeInputs();
        });

    </script>
</body>
</html>
